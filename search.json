[{"path":"https://natverse.org/coconat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://natverse.org/coconat/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://natverse.org/coconat/articles/identifiers-and-datasets.html","id":"datasets","dir":"Articles","previous_headings":"","what":"datasets","title":"identifiers-and-datasets","text":"coconat needs able handle range datasets. dataset record long name short name (2 characters [-z0-9]) use refer . can tell coconat new dataset :","code":"register_dataset('flywire', shortname = 'fw', species = 'Drosophila melanogaster', sex = 'F')"},{"path":"https://natverse.org/coconat/articles/identifiers-and-datasets.html","id":"identifiers-and-keys","dir":"Articles","previous_headings":"","what":"identifiers and keys","title":"identifiers-and-datasets","text":"dataset unique identifiers neurons contains. connectomics data sources currently work identifiers within 64 bit integer range, reason contain additional characters. ensure interoperability, default handling identifiers character vectors (strings) even native form package providing access dataset king numeric. introduce notion key form \"<dataset>:<id>\" second point vital since numeric identifier can used different datasets refer different neurons. provide number functions assist . basic level id2char()convert numeric ids character representation taking care issues like fact .character(1e5)=1e+05 can cause trouble.","code":"id2char(1000) #> [1] \"1000\" id2char(1e5) #> [1] \"100000\" id2char(NA) #> [1] NA id2char(bit64::as.integer64('12345678901234')) #> [1] \"12345678901234\""},{"path":"https://natverse.org/coconat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Jefferis. Author, maintainer.","code":""},{"path":"https://natverse.org/coconat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jefferis G (2023). coconat: Core Connectomics Utilities Natverse. https://github.com/natverse/coconat, http://natverse.org/coconat/.","code":"@Manual{,   title = {coconat: Core Connectomics Utilities for the Natverse},   author = {Gregory Jefferis},   year = {2023},   note = {https://github.com/natverse/coconat, http://natverse.org/coconat/}, }"},{"path":"https://natverse.org/coconat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Core Connectomics Utilities for the Natverse","text":"can install development version coconat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"natverse/coconat\")"},{"path":"https://natverse.org/coconat/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Core Connectomics Utilities for the Natverse","text":"basic example shows solve common problem:  Now can also cosine cluster can inputs (5 PNs look much )  outputs  course useful based richer set inputs","code":"library(coconat) # da2ds=neuprintr::neuprint_connection_table('DA2_lPN', details=TRUE, partners='out', conn = hbconn) da2ds=readRDS(system.file('sampledata/da2ds.rds', package = 'coconat')) head(da2ds) #>       bodyid    partner prepost weight      name    type #> 1 1796817841 5812982273       1     28   KCg-m_R   KCg-m #> 2 1796817841  574377845       1     28 LHAV3f1_R LHAV3f1 #> 3 1797505019 1202410042       1     27   KCg-m_R   KCg-m #> 4 1796818119  632402333       1     26   KCg-m_R   KCg-m #> 5 1827516355 5813055865       1     26 LHAD1f2_R LHAD1f2 #> 6 1796818119 5813080766       1     24   KCg-m_R   KCg-m library(Matrix) am=partner_summary2adjacency_matrix(da2ds, inputcol = 'bodyid', outputcol = 'partner') image(am) am2=partner_summary2adjacency_matrix(subset(da2ds, weight>=15),                                       inputcol = 'bodyid', outputcol = 'partner') image(am2) heatmap(cosine_sim(am, transpose = T)) heatmap(cosine_sim(am))"},{"path":"https://natverse.org/coconat/reference/add_cluster_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dataframe columns detailing ordering and groups from a dendrogram — add_cluster_info","title":"Add dataframe columns detailing ordering and groups from a dendrogram — add_cluster_info","text":"Add dataframe columns detailing ordering groups dendrogram","code":""},{"path":"https://natverse.org/coconat/reference/add_cluster_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dataframe columns detailing ordering and groups from a dendrogram — add_cluster_info","text":"","code":"add_cluster_info(   df,   dend,   h = NULL,   k = NULL,   colnames = NULL,   idcol = c(\"key\", \"id\", \"root_id\", \"bodyid\") )"},{"path":"https://natverse.org/coconat/reference/add_cluster_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add dataframe columns detailing ordering and groups from a dendrogram — add_cluster_info","text":"df dataframe e.g. returned coconatfly::cf_meta dend dendrogram hclust object h height cut dendrogram k number clusters cut dendrogram colnames names two new columns idcol name column containing id information. provide argument function choose first three default columns present df (warning >1 column present).","code":""},{"path":"https://natverse.org/coconat/reference/add_cluster_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add dataframe columns detailing ordering and groups from a dendrogram — add_cluster_info","text":"copy df one two extra columns called  dendid e.g. group_h2.","code":""},{"path":"https://natverse.org/coconat/reference/coconat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coconat: Core Connectomics Utilities for the Natverse — coconat-package","title":"coconat: Core Connectomics Utilities for the Natverse — coconat-package","text":"Provides data source agnostic utility functions support analysis connectomics data Neuroanatomy Toolbox (natverse) suite packages.","code":""},{"path":[]},{"path":"https://natverse.org/coconat/reference/coconat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coconat: Core Connectomics Utilities for the Natverse — coconat-package","text":"Maintainer: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://natverse.org/coconat/reference/cosine_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","title":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","text":"Efficient calculation cosine similarity sparse dense matrices","code":""},{"path":"https://natverse.org/coconat/reference/cosine_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","text":"","code":"cosine_sim(x, sparse = FALSE, transpose = FALSE)"},{"path":"https://natverse.org/coconat/reference/cosine_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","text":"x data matrix suitable clustering sparse Whether return sparse dense matrix (default dense) transpose F (default) calculates cosine distance columns. T calculates distance rows.","code":""},{"path":"https://natverse.org/coconat/reference/cosine_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","text":"square matrix, dense unless sparse=TRUE x   sparse.","code":""},{"path":"https://natverse.org/coconat/reference/cosine_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","text":"much faster e.g. lsa::cosine added   benefit works sparse input matrices","code":""},{"path":"https://natverse.org/coconat/reference/cosine_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficient calculation of cosine similarity for sparse or dense matrices — cosine_sim","text":"","code":"da2ds15=readRDS(system.file('sampledata/da2ds15.rds', package = 'coconat')) am=partner_summary2adjacency_matrix(da2ds15, inputcol = 'partner', outputcol = 'bodyid') cosine_sim(am) #>            1796817841 1797505019 1796818119 1827516355  818983130 #> 1796817841 1.00000000 0.09631851 0.00000000  0.0000000 0.03509041 #> 1797505019 0.09631851 1.00000000 0.00000000  0.0000000 0.09507157 #> 1796818119 0.00000000 0.00000000 1.00000000  0.0000000 0.07046832 #> 1827516355 0.00000000 0.00000000 0.00000000  1.0000000 0.20027384 #> 818983130  0.03509041 0.09507157 0.07046832  0.2002738 1.00000000  if (FALSE) { fam_pnkc2=flywire_adjacency_matrix2(   inputids = 'class:ALPN_R', outputids = 'class:Kenyon_Cell_R',   sparse=T , threshold = 2) kckc.cos=cosine_sim(fam_pnkc2) pnpn.cos=cosine_sim(fam_pnkc2, transpose=T) }"},{"path":"https://natverse.org/coconat/reference/dataset_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Return dataset names either all or those matching a query — dataset_names","title":"Return dataset names either all or those matching a query — dataset_names","text":"Return dataset names either matching query","code":""},{"path":"https://natverse.org/coconat/reference/dataset_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return dataset names either all or those matching a query — dataset_names","text":"","code":"dataset_names(   query = NULL,   return.short = FALSE,   match = c(\"both\", \"long\", \"short\"),   namespace = \"default\" )"},{"path":"https://natverse.org/coconat/reference/dataset_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return dataset names either all or those matching a query — dataset_names","text":"query character vector partially matched dataset names return.short Whether return long short name match Whether query match long short forms dataset name. namespace Optional character vector specifying namespace used organise datasets (advanced use ).","code":""},{"path":"https://natverse.org/coconat/reference/dataset_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return dataset names either all or those matching a query — dataset_names","text":"character vector names","code":""},{"path":"https://natverse.org/coconat/reference/dataset_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return dataset names either all or those matching a query — dataset_names","text":"","code":"dataset_names() #> character(0)"},{"path":"https://natverse.org/coconat/reference/id2char.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert any id into a character vector — id2char","title":"Convert any id into a character vector — id2char","text":"Convert id character vector","code":""},{"path":"https://natverse.org/coconat/reference/id2char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert any id into a character vector — id2char","text":"","code":"id2char(x)"},{"path":"https://natverse.org/coconat/reference/id2char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert any id into a character vector — id2char","text":"x character numeric vector ids","code":""},{"path":"https://natverse.org/coconat/reference/id2char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert any id into a character vector — id2char","text":"character vector","code":""},{"path":"https://natverse.org/coconat/reference/id2char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert any id into a character vector — id2char","text":"","code":"id2char(1000) #> [1] \"1000\" id2char(\"1000\") #> [1] \"1000\" id2char(1e5) #> [1] \"100000\""},{"path":"https://natverse.org/coconat/reference/partner_summary2adjacency_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","title":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","text":"Convert partner summary table adjacency matrix","code":""},{"path":"https://natverse.org/coconat/reference/partner_summary2adjacency_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","text":"","code":"partner_summary2adjacency_matrix(   x,   sparse = TRUE,   inputcol = \"pre_id\",   outputcol = \"post_id\",   inputids = NULL,   outputids = NULL,   standardise_input = T )"},{"path":"https://natverse.org/coconat/reference/partner_summary2adjacency_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","text":"x dataframe produced flywire_partner_summary, neuprint_connection_table equivalent. sparse Whether return sparse matrix (default TRUE case making big one) inputcol, outputcol Character vector specifying columns containing input output identifiers. See details section information. inputids, outputids Optional vectors input/output ids ensure present output matrix. Alternatively may contain function takes dataframe x input returns grouping vector. See details section information. standardise_input whether standardise column names/types input dataframe. default work flywire fafbseg neuprintr input ensure identify appropriate pre_id/post_id columns.","code":""},{"path":"https://natverse.org/coconat/reference/partner_summary2adjacency_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","text":"matrix inputs rows outputs (downstream neurons)   columns","code":""},{"path":"https://natverse.org/coconat/reference/partner_summary2adjacency_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","text":"inputcol outputcol arguments can name columns   containing values besides unique numerical identifiers   neurons. example can refer cell type column, thereby   generating grouped connectivity matrix. useful   bringing together neurons similar connectivity patterns across brain   hemispheres individuals. Passing function inputids /outputids allows   partner neurons grouped maximum flexibility. input   function dataframe x (standardisation   requested). output must single vector can   interpreted factor group partner neurons.","code":""},{"path":"https://natverse.org/coconat/reference/partner_summary2adjacency_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a partner summary table into an adjacency matrix — partner_summary2adjacency_matrix","text":"","code":"if (FALSE) { da2ds=neuprintr::neuprint_connection_table('DA2_lPN', details=TRUE, partners='out', threshold=5) am=partner_summary2adjacency_matrix(da2ds, inputcol = 'bodyid', outputcol = 'partner') library(Matrix) image(am, ylab='DA2 PNs', xlab='outputs')  amg=partner_summary2adjacency_matrix(da2ds, inputcol = 'bodyid', outputcol = 'type') image(amg, ylab='DA2 PNs', xlab='output cell types') }"},{"path":"https://natverse.org/coconat/reference/prepare_cosine_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Cosine matrix utility functions — prepare_cosine_matrix","title":"Cosine matrix utility functions — prepare_cosine_matrix","text":"functions intended use package authors rather   end users.","code":""},{"path":"https://natverse.org/coconat/reference/prepare_cosine_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cosine matrix utility functions — prepare_cosine_matrix","text":"","code":"prepare_cosine_matrix(   x,   partners = c(\"inputs\", \"outputs\"),   action = c(\"zero\", \"drop\") )"},{"path":"https://natverse.org/coconat/reference/prepare_cosine_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cosine matrix utility functions — prepare_cosine_matrix","text":"x matrix named list input/output matrices partners Whether select input output matrices available action Whether zero drop NA values cosine matrix (may present columns entries)","code":""},{"path":"https://natverse.org/coconat/reference/prepare_cosine_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cosine matrix utility functions — prepare_cosine_matrix","text":"matrix. inputs outputs used   weighted total number input output synapses.","code":""},{"path":"https://natverse.org/coconat/reference/register_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a dataset for use with coconat and related packages — register_dataset","title":"Register a dataset for use with coconat and related packages — register_dataset","text":"Register dataset use coconat related packages","code":""},{"path":"https://natverse.org/coconat/reference/register_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a dataset for use with coconat and related packages — register_dataset","text":"","code":"register_dataset(   name,   shortname = NULL,   species = NULL,   sex = c(\"F\", \"M\", \"H\", \"U\"),   age = NULL,   idfun = NULL,   metafun = NULL,   partnerfun = NULL,   namespace = \"default\",   ... )"},{"path":"https://natverse.org/coconat/reference/register_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a dataset for use with coconat and related packages — register_dataset","text":"name long name dataset; must unique shortname abbreviation dataset - used construct keys plot labels etc species binomial name species sex Female, Male, Hermaphrodite Uncertain age description stage (e.g. adult L1 P19) idfun function function name fetch ids based query specification. metafun function function name fetch metadata set ids dataset. partnerfun function function name fetch connections ids dataset. namespace Expert use . Can used define separate namespaces across dataset names keys unique. Currently used testing purposes. ... Additional named arguments specifying properties dataset","code":""},{"path":"https://natverse.org/coconat/reference/register_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a dataset for use with coconat and related packages — register_dataset","text":"return value. Called side effect.","code":""},{"path":"https://natverse.org/coconat/reference/register_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a dataset for use with coconat and related packages — register_dataset","text":"","code":"if (FALSE) { # partial example. metafun and partnerfun are pretty important to specify register_dataset(\"flywire\", shortname='fw', species='Drosophila melanogaster', sex='F', age=\"adult\") }"},{"path":[]},{"path":"https://natverse.org/coconat/news/index.html","id":"coconat-011","dir":"Changelog","previous_headings":"","what":"coconat 0.1.1","title":"coconat 0.1.1","text":"Added NEWS.md file track changes package. Add support interactive heatmap @jefferis https://github.com/natverse/coconat/pull/2 Dev version @jefferis https://github.com/natverse/coconat/pull/3 interactive heatmap improvements @jefferis https://github.com/natverse/coconat/pull/4 Full Changelog: https://github.com/natverse/coconat/compare/v0.1.0…v0.1.1","code":""},{"path":"https://natverse.org/coconat/news/index.html","id":"coconat-010","dir":"Changelog","previous_headings":"","what":"coconat 0.1.0","title":"coconat 0.1.0","text":"First released version","code":""}]
