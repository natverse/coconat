% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sparsemat.R
\name{colScaleM}
\alias{colScaleM}
\alias{rowScaleM}
\alias{geomScaleM}
\title{Efficient column and row scaling for sparse matrices}
\usage{
colScaleM(A, na.rm = TRUE)

rowScaleM(A, na.rm = TRUE)

geomScaleM(A, na.rm = TRUE)
}
\arguments{
\item{A}{a sparse (or dense) matrix}

\item{na.rm}{when \code{T}, the default, converts any NA values (usually
resulting from divide by zero errors when a neuron has no partners) to 0}
}
\value{
A scaled sparse matrix
}
\description{
\code{colScale} normalises a matrix by the sum of each column

\code{rowScale} normalises a matrix by the sum of each row

sqrt of both column and row normalisation
}
\details{
Conventionally in connectivity matrices, rows are upstream input
  neurons and columns are downstream output neurons. \code{colScaleM} will
  therefore normalise by the total input onto each downstream neuron while
  \code{rowScaleM} will normalise by the total output from each upstream
  neuron.

  These functions will work with dense inputs but are less efficient than
  their base R cousins (e.g. \code{scale}). As an example, normalising a 4x4k
  subset of VNC connectivity data took \itemize{

  \item \code{colScaleM} sparse 3.5ms

  \item \code{colScaleM} dense 1460ms

  \item \code{scale} dense 365ms

  }

  In conclusion sparse matrices with \code{colScaleM}/\code{rowScaleM} are
  the way to go for real connectivity matrices! For large matrices they will
  be \emph{much} faster and for small ones, both methods will be fast anyway.

  Note also that these functions were originally called \code{colScale} etc
  but then the \code{Matrix} package added functions of the same name.
}
\examples{
library(Matrix)
set.seed(42)
A <- Matrix(rbinom(100,10,0.05), nrow = 10)
rownames(A)=letters[1:10]
colnames(A)=LETTERS[1:10]

colScaleM(A)
rowScaleM(A)
geomScaleM(A)
}
\seealso{
\code{Matrix::\link[Matrix]{colScale}} on which these are based and,
  for the original version,
  \url{https://stackoverflow.com/questions/39284774/column-rescaling-for-a-very-large-sparse-matrix-in-r}
}
